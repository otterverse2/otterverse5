{"version":3,"file":"index.umd.js","sources":["../src/index.ts"],"sourcesContent":["// symbols\nconst OWN_KEYS_SYMBOL = Symbol();\nconst TRACK_MEMO_SYMBOL = Symbol();\nconst GET_ORIGINAL_SYMBOL = Symbol();\n\n// properties\nconst AFFECTED_PROPERTY = 'a';\nconst FROZEN_PROPERTY = 'f';\nconst PROXY_PROPERTY = 'p';\nconst PROXY_CACHE_PROPERTY = 'c';\nconst NEXT_OBJECT_PROPERTY = 'n';\nconst CHANGED_PROPERTY = 'g';\n\n// get object prototype\nconst getProto = Object.getPrototypeOf;\n\nconst objectsToTrack = new WeakMap<object, boolean>();\n\n// check if obj is a plain object or an array\nconst isObjectToTrack = <T>(obj: T): obj is T extends object ? T : never => (\n  obj && (objectsToTrack.has(obj as unknown as object)\n    ? objectsToTrack.get(obj as unknown as object) as boolean\n    : (getProto(obj) === Object.prototype || getProto(obj) === Array.prototype)\n  )\n);\n\n// check if it is object\nconst isObject = (x: unknown): x is object => (\n  typeof x === 'object' && x !== null\n);\n\n// check if frozen\nconst isFrozen = (obj: object) => (\n  Object.isFrozen(obj) || (\n    // Object.isFrozen() doesn't detect non-writable properties\n    // See: https://github.com/dai-shi/proxy-compare/pull/8\n    Object.values(Object.getOwnPropertyDescriptors(obj)).some(\n      (descriptor) => !descriptor.writable,\n    )\n  )\n);\n\n// copy frozen object\nconst unfreeze = (obj: object) => {\n  if (Array.isArray(obj)) {\n    // Arrays need a special way to copy\n    return Array.from(obj);\n  }\n  // For non-array objects, we create a new object keeping the prototype\n  // with changing all configurable options (otherwise, proxies will complain)\n  const descriptors = Object.getOwnPropertyDescriptors(obj);\n  Object.values(descriptors).forEach((desc) => { desc.configurable = true; });\n  return Object.create(getProto(obj), descriptors);\n};\n\ntype Affected = WeakMap<object, Set<string | symbol>>;\ntype ProxyCache<T extends object> = WeakMap<object, ProxyHandler<T>>;\ntype ProxyHandler<T extends object> = {\n  [FROZEN_PROPERTY]: boolean;\n  [PROXY_PROPERTY]?: T;\n  [PROXY_CACHE_PROPERTY]?: ProxyCache<object> | undefined;\n  [AFFECTED_PROPERTY]?: Affected;\n  get(target: T, key: string | symbol): unknown;\n  has(target: T, key: string | symbol): boolean;\n  getOwnPropertyDescriptor(target: T, key: string | symbol): PropertyDescriptor | undefined;\n  ownKeys(target: T): (string | symbol)[];\n  set?(target: T, key: string | symbol, value: unknown): boolean;\n  deleteProperty?(target: T, key: string | symbol): boolean;\n};\n\nconst createProxyHandler = <T extends object>(origObj: T, frozen: boolean) => {\n  let trackObject = false; // for trackMemo\n  const recordUsage = (h: ProxyHandler<T>, key: string | symbol, skipWithOwnKeys?: boolean) => {\n    if (!trackObject) {\n      let used = (h[AFFECTED_PROPERTY] as Affected).get(origObj);\n      if (!used) {\n        used = new Set();\n        (h[AFFECTED_PROPERTY] as Affected).set(origObj, used);\n      }\n      if (!skipWithOwnKeys || !used.has(OWN_KEYS_SYMBOL)) {\n        used.add(key);\n      }\n    }\n  };\n  const recordObjectAsUsed = (h: ProxyHandler<T>) => {\n    trackObject = true;\n    (h[AFFECTED_PROPERTY] as Affected).delete(origObj);\n  };\n  const handler: ProxyHandler<T> = {\n    [FROZEN_PROPERTY]: frozen,\n    get(target, key) {\n      if (key === GET_ORIGINAL_SYMBOL) {\n        return origObj;\n      }\n      recordUsage(this, key);\n      return createProxy(\n        (target as any)[key],\n        (this[AFFECTED_PROPERTY] as Affected),\n        this[PROXY_CACHE_PROPERTY],\n      );\n    },\n    has(target, key) {\n      if (key === TRACK_MEMO_SYMBOL) {\n        recordObjectAsUsed(this);\n        return true;\n      }\n      // LIMITATION: We simply record the same as `get`.\n      // This means { a: {} } and { a: {} } is detected as changed,\n      // if `'a' in obj` is handled.\n      recordUsage(this, key);\n      return key in target;\n    },\n    getOwnPropertyDescriptor(target, key) {\n      // LIMITATION: We simply record the same as `get`.\n      // This means { a: {} } and { a: {} } is detected as changed,\n      // if `obj.getOwnPropertyDescriptor('a'))` is handled.\n      recordUsage(this, key, true);\n      return Object.getOwnPropertyDescriptor(target, key);\n    },\n    ownKeys(target) {\n      recordUsage(this, OWN_KEYS_SYMBOL);\n      return Reflect.ownKeys(target);\n    },\n  };\n  if (frozen) {\n    handler.set = handler.deleteProperty = () => false;\n  }\n  return handler;\n};\n\nconst getOriginalObject = <T extends object>(obj: T) => (\n  // unwrap proxy\n  (obj as { [GET_ORIGINAL_SYMBOL]?: typeof obj })[GET_ORIGINAL_SYMBOL]\n  // otherwise\n  || obj\n);\n\n/**\n * Create a proxy.\n *\n * This function will create a proxy at top level and proxy nested objects as you access them,\n * in order to keep track of which properties were accessed via get/has proxy handlers:\n *\n * NOTE: Printing of WeakMap is hard to inspect and not very readable\n * for this purpose you can use the `affectedToPathList` helper.\n *\n * @param {object} obj - Object that will be wrapped on the proxy.\n * @param {WeakMap<object, unknown>} affected -\n * WeakMap that will hold the tracking of which properties in the proxied object were accessed.\n * @param {WeakMap<object, unknown>} [proxyCache] -\n * WeakMap that will help keep referential identity for proxies.\n * @returns {Proxy<object>} - Object wrapped in a proxy.\n *\n * @example\n * import { createProxy } from 'proxy-compare';\n *\n * const original = { a: \"1\", c: \"2\", d: { e: \"3\" } };\n * const affected = new WeakMap();\n * const proxy = createProxy(original, affected);\n *\n * proxy.a // Will mark as used and track its value.\n * // This will update the affected WeakMap with original as key\n * // and a Set with \"a\"\n *\n * proxy.d // Will mark \"d\" as accessed to track and proxy itself ({ e: \"3\" }).\n * // This will update the affected WeakMap with original as key\n * // and a Set with \"d\"\n */\nexport const createProxy = <T>(\n  obj: T,\n  affected: WeakMap<object, unknown>,\n  proxyCache?: WeakMap<object, unknown>,\n): T => {\n  if (!isObjectToTrack(obj)) return obj;\n  const target = getOriginalObject(obj);\n  const frozen = isFrozen(target);\n  let proxyHandler: ProxyHandler<typeof target> | undefined = (\n    proxyCache && (proxyCache as ProxyCache<typeof target>).get(target)\n  );\n  if (!proxyHandler || proxyHandler[FROZEN_PROPERTY] !== frozen) {\n    proxyHandler = createProxyHandler<T extends object ? T : never>(target, frozen);\n    proxyHandler[PROXY_PROPERTY] = new Proxy(\n      frozen ? unfreeze(target) : target,\n      proxyHandler,\n    ) as typeof target;\n    if (proxyCache) {\n      proxyCache.set(target, proxyHandler);\n    }\n  }\n  proxyHandler[AFFECTED_PROPERTY] = affected as Affected;\n  proxyHandler[PROXY_CACHE_PROPERTY] = proxyCache as ProxyCache<object> | undefined;\n  return proxyHandler[PROXY_PROPERTY] as typeof target;\n};\n\nconst isOwnKeysChanged = (prevObj: object, nextObj: object) => {\n  const prevKeys = Reflect.ownKeys(prevObj);\n  const nextKeys = Reflect.ownKeys(nextObj);\n  return prevKeys.length !== nextKeys.length\n    || prevKeys.some((k, i) => k !== nextKeys[i]);\n};\n\ntype ChangedCache = WeakMap<object, {\n  [NEXT_OBJECT_PROPERTY]: object;\n  [CHANGED_PROPERTY]: boolean;\n}>;\n\n/**\n * Compare changes on objects.\n *\n * This will compare the affected properties on tracked objects inside the proxy\n * to check if there were any changes made to it,\n * by default if no property was accessed on the proxy it will attempt to do a\n * reference equality check for the objects provided (Object.is(a, b)). If you access a property\n * on the proxy, then isChanged will only compare the affected properties.\n *\n * @param {object} prevObj - The previous object to compare.\n * @param {object} nextObj - Object to compare with the previous one.\n * @param {WeakMap<object, unknown>} affected -\n * WeakMap that holds the tracking of which properties in the proxied object were accessed.\n * @param {WeakMap<object, unknown>} [cache] -\n * WeakMap that holds a cache of the comparisons for better performance with repetitive comparisons,\n * and to avoid infinite loop with circular structures.\n * @returns {boolean} - Boolean indicating if the affected property on the object has changed.\n *\n * @example\n * import { createProxy, isChanged } from 'proxy-compare';\n *\n * const obj = { a: \"1\", c: \"2\", d: { e: \"3\" } };\n * const affected = new WeakMap();\n *\n * const proxy = createProxy(obj, affected);\n *\n * proxy.a\n *\n * isChanged(obj, { a: \"1\" }, affected) // false\n *\n * proxy.a = \"2\"\n *\n * isChanged(obj, { a: \"1\" }, affected) // true\n */\n\nexport const isChanged = (\n  prevObj: unknown,\n  nextObj: unknown,\n  affected: WeakMap<object, unknown>,\n  cache?: WeakMap<object, unknown>,\n): boolean => {\n  if (Object.is(prevObj, nextObj)) {\n    return false;\n  }\n  if (!isObject(prevObj) || !isObject(nextObj)) return true;\n  const used = (affected as Affected).get(getOriginalObject(prevObj));\n  if (!used) return true;\n  if (cache) {\n    const hit = (cache as ChangedCache).get(prevObj);\n    if (hit && hit[NEXT_OBJECT_PROPERTY] === nextObj) {\n      return hit[CHANGED_PROPERTY];\n    }\n    // for object with cycles\n    (cache as ChangedCache).set(prevObj, {\n      [NEXT_OBJECT_PROPERTY]: nextObj,\n      [CHANGED_PROPERTY]: false,\n    });\n  }\n  let changed: boolean | null = null;\n  // eslint-disable-next-line no-restricted-syntax\n  for (const key of used) {\n    const c = key === OWN_KEYS_SYMBOL ? isOwnKeysChanged(prevObj, nextObj)\n      : isChanged(\n        (prevObj as any)[key],\n        (nextObj as any)[key],\n        affected,\n        cache,\n      );\n    if (c === true || c === false) changed = c;\n    if (changed) break;\n  }\n  if (changed === null) changed = true;\n  if (cache) {\n    cache.set(prevObj, {\n      [NEXT_OBJECT_PROPERTY]: nextObj,\n      [CHANGED_PROPERTY]: changed,\n    });\n  }\n  return changed;\n};\n\n// explicitly track object with memo\nexport const trackMemo = (obj: unknown) => {\n  if (isObjectToTrack(obj)) {\n    return TRACK_MEMO_SYMBOL in obj;\n  }\n  return false;\n};\n\n/**\n * Unwrap proxy to get the original object.\n *\n * Used to retrieve the original object used to create the proxy instance with `createProxy`.\n *\n * @param {Proxy<object>} obj -  The proxy wrapper of the originial object.\n * @returns {object | null} - Return either the unwrapped object if exists.\n *\n * @example\n * import { createProxy, getUntracked } from 'proxy-compare';\n *\n * const original = { a: \"1\", c: \"2\", d: { e: \"3\" } };\n * const affected = new WeakMap();\n *\n * const proxy = createProxy(original, affected);\n * const originalFromProxy = getUntracked(proxy)\n *\n * Object.is(original, originalFromProxy) // true\n * isChanged(original, originalFromProxy, affected) // false\n */\nexport const getUntracked = <T>(obj: T): T | null => {\n  if (isObjectToTrack(obj)) {\n    return (obj as { [GET_ORIGINAL_SYMBOL]?: T })[GET_ORIGINAL_SYMBOL] || null;\n  }\n  return null;\n};\n\n/**\n * Mark object to be tracked.\n *\n * This function marks an object that will be passed into `createProxy`\n * as marked to track or not. By default only Array and Object are marked to track,\n * so this is useful for example to mark a class instance to track or to mark a object\n * to be untracked when creating your proxy.\n *\n * @param obj - Object to mark as tracked or not.\n * @param mark - Boolean indicating whether you want to track this object or not.\n * @returns No return.\n *\n * @example\n * import { createProxy, markToTrack, isChanged } from 'proxy-compare';\n *\n * const nested = { e: \"3\" }\n *\n * markToTrack(nested, false)\n *\n * const original = { a: \"1\", c: \"2\", d: nested };\n * const affected = new WeakMap();\n *\n * const proxy = createProxy(original, affected);\n *\n * proxy.d.e\n *\n * isChanged(original, { d: { e: \"3\" } }, affected) // true\n */\nexport const markToTrack = (obj: object, mark = true) => {\n  objectsToTrack.set(obj, mark);\n};\n\n// convert affected to path list\nexport const affectedToPathList = (\n  obj: unknown,\n  affected: WeakMap<object, unknown>,\n) => {\n  const list: (string | symbol)[][] = [];\n  const seen = new WeakSet();\n  const walk = (x: unknown, path?: (string | symbol)[]) => {\n    if (seen.has(x as object)) {\n      // for object with cycles\n      return;\n    }\n    if (isObject(x)) {\n      seen.add(x);\n    }\n    const used = isObject(x) && (affected as Affected).get(getOriginalObject(x));\n    if (used) {\n      used.forEach((key) => {\n        walk((x as any)[key], path ? [...path, key] : [key]);\n      });\n    } else if (path) {\n      list.push(path);\n    }\n  };\n  walk(obj);\n  return list;\n};\n"],"names":["OWN_KEYS_SYMBOL","Symbol","TRACK_MEMO_SYMBOL","getProto","Object","getPrototypeOf","WeakMap","isObjectToTrack","obj","objectsToTrack","has","get","prototype","Array","isObject","x","getOriginalObject","GET_ORIGINAL_SYMBOL","createProxy","affected","proxyCache","target","frozen","isFrozen","values","getOwnPropertyDescriptors","some","descriptor","writable","proxyHandler","origObj","_handler","trackObject","recordUsage","h","key","skipWithOwnKeys","used","Set","set","add","FROZEN_PROPERTY","this","getOwnPropertyDescriptor","ownKeys","Reflect","handler","deleteProperty","createProxyHandler","Proxy","isArray","from","descriptors","forEach","desc","configurable","create","unfreeze","isOwnKeysChanged","prevObj","nextObj","prevKeys","nextKeys","length","k","i","list","seen","WeakSet","walk","path","push","isChanged","cache","is","_cache$set","hit","NEXT_OBJECT_PROPERTY","CHANGED_PROPERTY","_step","changed","_iterator","_createForOfIteratorHelperLoose","done","value","c","_cache$set2","mark"],"mappings":"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"}