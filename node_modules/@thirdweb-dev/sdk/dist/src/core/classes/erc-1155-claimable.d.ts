import { DropErc1155ClaimConditions } from "./drop-erc1155-claim-conditions";
import { DetectableFeature } from "../interfaces/DetectableFeature";
import { BaseClaimConditionERC1155 } from "../../types/eips";
import { IStorage } from "../interfaces/IStorage";
import { ContractWrapper } from "./contract-wrapper";
import { ClaimVerification } from "../../types/claim-conditions/claim-conditions";
import { BigNumberish } from "ethers";
import { TransactionResult } from "../types";
import { TransactionTask } from "./TransactionTask";
export declare class Erc1155Claimable implements DetectableFeature {
    featureName: "ERC721Claimable";
    conditions: DropErc1155ClaimConditions<BaseClaimConditionERC1155>;
    private contractWrapper;
    private storage;
    constructor(contractWrapper: ContractWrapper<BaseClaimConditionERC1155>, storage: IStorage);
    /**
     * Construct a claim transaction without executing it.
     * This is useful for estimating the gas cost of a claim transaction, overriding transaction options and having fine grained control over the transaction execution.
     * @param destinationAddress - Address you want to send the token to
     * @param tokenId - Id of the token you want to claim
     * @param quantity - Quantity of the tokens you want to claim
     * @param checkERC20Allowance - Optional, check if the wallet has enough ERC20 allowance to claim the tokens, and if not, approve the transfer
     * @param claimData - Optional claim verification data (e.g. price, allowlist proof, etc...)
     */
    getClaimTransaction(destinationAddress: string, tokenId: BigNumberish, quantity: BigNumberish, checkERC20Allowance?: boolean, // TODO split up allowance checks
    claimData?: ClaimVerification): Promise<TransactionTask>;
    /**
     * Claim NFTs to a specific Wallet
     *
     * @remarks Let the specified wallet claim NFTs.
     *
     * @example
     * ```javascript
     * const address = "{{wallet_address}}"; // address of the wallet you want to claim the NFTs
     * const tokenId = 0; // the id of the NFT you want to claim
     * const quantity = 1; // how many NFTs you want to claim
     *
     * const tx = await contract.edition.drop.claim.to(address, tokenId, quantity);
     * const receipt = tx.receipt; // the transaction receipt
     * ```
     *
     * @param destinationAddress - Address you want to send the token to
     * @param tokenId - Id of the token you want to claim
     * @param quantity - Quantity of the tokens you want to claim
     * @param checkERC20Allowance - Optional, check if the wallet has enough ERC20 allowance to claim the tokens, and if not, approve the transfer
     * @param claimData - Optional claim verification data (e.g. price, allowlist proof, etc...)
     *
     * @returns - Receipt for the transaction
     */
    to(destinationAddress: string, tokenId: BigNumberish, quantity: BigNumberish, checkERC20Allowance?: boolean, claimData?: ClaimVerification): Promise<TransactionResult>;
}
